// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto;
namespace Proto {
class MoveSphere;
struct MoveSphereDefaultTypeInternal;
extern MoveSphereDefaultTypeInternal _MoveSphere_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class Rotation;
struct RotationDefaultTypeInternal;
extern RotationDefaultTypeInternal _Rotation_default_instance_;
class Sync;
struct SyncDefaultTypeInternal;
extern SyncDefaultTypeInternal _Sync_default_instance_;
class SyncCube;
struct SyncCubeDefaultTypeInternal;
extern SyncCubeDefaultTypeInternal _SyncCube_default_instance_;
class SyncPid;
struct SyncPidDefaultTypeInternal;
extern SyncPidDefaultTypeInternal _SyncPid_default_instance_;
class SyncPlayer;
struct SyncPlayerDefaultTypeInternal;
extern SyncPlayerDefaultTypeInternal _SyncPlayer_default_instance_;
class Transform;
struct TransformDefaultTypeInternal;
extern TransformDefaultTypeInternal _Transform_default_instance_;
}  // namespace Proto
PROTOBUF_NAMESPACE_OPEN
template<> ::Proto::MoveSphere* Arena::CreateMaybeMessage<::Proto::MoveSphere>(Arena*);
template<> ::Proto::Position* Arena::CreateMaybeMessage<::Proto::Position>(Arena*);
template<> ::Proto::Rotation* Arena::CreateMaybeMessage<::Proto::Rotation>(Arena*);
template<> ::Proto::Sync* Arena::CreateMaybeMessage<::Proto::Sync>(Arena*);
template<> ::Proto::SyncCube* Arena::CreateMaybeMessage<::Proto::SyncCube>(Arena*);
template<> ::Proto::SyncPid* Arena::CreateMaybeMessage<::Proto::SyncPid>(Arena*);
template<> ::Proto::SyncPlayer* Arena::CreateMaybeMessage<::Proto::SyncPlayer>(Arena*);
template<> ::Proto::Transform* Arena::CreateMaybeMessage<::Proto::Transform>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Proto {

// ===================================================================

class SyncPid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SyncPid) */ {
 public:
  inline SyncPid() : SyncPid(nullptr) {}
  ~SyncPid() override;
  explicit PROTOBUF_CONSTEXPR SyncPid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncPid(const SyncPid& from);
  SyncPid(SyncPid&& from) noexcept
    : SyncPid() {
    *this = ::std::move(from);
  }

  inline SyncPid& operator=(const SyncPid& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPid& operator=(SyncPid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncPid& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncPid* internal_default_instance() {
    return reinterpret_cast<const SyncPid*>(
               &_SyncPid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SyncPid& a, SyncPid& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncPid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncPid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncPid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncPid& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncPid& from) {
    SyncPid::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPid* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SyncPid";
  }
  protected:
  explicit SyncPid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kSpeedFieldNumber = 2,
  };
  // int64 Pid = 1;
  void clear_pid();
  int64_t pid() const;
  void set_pid(int64_t value);
  private:
  int64_t _internal_pid() const;
  void _internal_set_pid(int64_t value);
  public:

  // float Speed = 2;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.SyncPid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t pid_;
    float speed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class MoveSphere final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.MoveSphere) */ {
 public:
  inline MoveSphere() : MoveSphere(nullptr) {}
  ~MoveSphere() override;
  explicit PROTOBUF_CONSTEXPR MoveSphere(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveSphere(const MoveSphere& from);
  MoveSphere(MoveSphere&& from) noexcept
    : MoveSphere() {
    *this = ::std::move(from);
  }

  inline MoveSphere& operator=(const MoveSphere& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveSphere& operator=(MoveSphere&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveSphere& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveSphere* internal_default_instance() {
    return reinterpret_cast<const MoveSphere*>(
               &_MoveSphere_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MoveSphere& a, MoveSphere& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveSphere* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveSphere* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveSphere* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveSphere>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveSphere& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MoveSphere& from) {
    MoveSphere::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveSphere* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.MoveSphere";
  }
  protected:
  explicit MoveSphere(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kHorizontalFieldNumber = 2,
    kVerticalFieldNumber = 3,
  };
  // int64 Pid = 1;
  void clear_pid();
  int64_t pid() const;
  void set_pid(int64_t value);
  private:
  int64_t _internal_pid() const;
  void _internal_set_pid(int64_t value);
  public:

  // float Horizontal = 2;
  void clear_horizontal();
  float horizontal() const;
  void set_horizontal(float value);
  private:
  float _internal_horizontal() const;
  void _internal_set_horizontal(float value);
  public:

  // float Vertical = 3;
  void clear_vertical();
  float vertical() const;
  void set_vertical(float value);
  private:
  float _internal_vertical() const;
  void _internal_set_vertical(float value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.MoveSphere)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t pid_;
    float horizontal_;
    float vertical_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  explicit PROTOBUF_CONSTEXPR Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Position& from) {
    Position::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Rotation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Rotation) */ {
 public:
  inline Rotation() : Rotation(nullptr) {}
  ~Rotation() override;
  explicit PROTOBUF_CONSTEXPR Rotation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rotation(const Rotation& from);
  Rotation(Rotation&& from) noexcept
    : Rotation() {
    *this = ::std::move(from);
  }

  inline Rotation& operator=(const Rotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rotation& operator=(Rotation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rotation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rotation* internal_default_instance() {
    return reinterpret_cast<const Rotation*>(
               &_Rotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Rotation& a, Rotation& b) {
    a.Swap(&b);
  }
  inline void Swap(Rotation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rotation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rotation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rotation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Rotation& from) {
    Rotation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rotation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Rotation";
  }
  protected:
  explicit Rotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float w = 4;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.Rotation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    float w_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Transform final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Transform) */ {
 public:
  inline Transform() : Transform(nullptr) {}
  ~Transform() override;
  explicit PROTOBUF_CONSTEXPR Transform(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transform(const Transform& from);
  Transform(Transform&& from) noexcept
    : Transform() {
    *this = ::std::move(from);
  }

  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform& operator=(Transform&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transform& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transform* internal_default_instance() {
    return reinterpret_cast<const Transform*>(
               &_Transform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Transform& a, Transform& b) {
    a.Swap(&b);
  }
  inline void Swap(Transform* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transform>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transform& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Transform& from) {
    Transform::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transform* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Transform";
  }
  protected:
  explicit Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kRotationFieldNumber = 2,
  };
  // .Proto.Position Position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Proto::Position& position() const;
  PROTOBUF_NODISCARD ::Proto::Position* release_position();
  ::Proto::Position* mutable_position();
  void set_allocated_position(::Proto::Position* position);
  private:
  const ::Proto::Position& _internal_position() const;
  ::Proto::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Proto::Position* position);
  ::Proto::Position* unsafe_arena_release_position();

  // .Proto.Rotation rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Proto::Rotation& rotation() const;
  PROTOBUF_NODISCARD ::Proto::Rotation* release_rotation();
  ::Proto::Rotation* mutable_rotation();
  void set_allocated_rotation(::Proto::Rotation* rotation);
  private:
  const ::Proto::Rotation& _internal_rotation() const;
  ::Proto::Rotation* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Proto::Rotation* rotation);
  ::Proto::Rotation* unsafe_arena_release_rotation();

  // @@protoc_insertion_point(class_scope:Proto.Transform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Proto::Position* position_;
    ::Proto::Rotation* rotation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SyncPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SyncPlayer) */ {
 public:
  inline SyncPlayer() : SyncPlayer(nullptr) {}
  ~SyncPlayer() override;
  explicit PROTOBUF_CONSTEXPR SyncPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncPlayer(const SyncPlayer& from);
  SyncPlayer(SyncPlayer&& from) noexcept
    : SyncPlayer() {
    *this = ::std::move(from);
  }

  inline SyncPlayer& operator=(const SyncPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPlayer& operator=(SyncPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncPlayer* internal_default_instance() {
    return reinterpret_cast<const SyncPlayer*>(
               &_SyncPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SyncPlayer& a, SyncPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncPlayer& from) {
    SyncPlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SyncPlayer";
  }
  protected:
  explicit SyncPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformFieldNumber = 2,
    kPidFieldNumber = 1,
  };
  // .Proto.Transform transform = 2;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::Proto::Transform& transform() const;
  PROTOBUF_NODISCARD ::Proto::Transform* release_transform();
  ::Proto::Transform* mutable_transform();
  void set_allocated_transform(::Proto::Transform* transform);
  private:
  const ::Proto::Transform& _internal_transform() const;
  ::Proto::Transform* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::Proto::Transform* transform);
  ::Proto::Transform* unsafe_arena_release_transform();

  // int64 pid = 1;
  void clear_pid();
  int64_t pid() const;
  void set_pid(int64_t value);
  private:
  int64_t _internal_pid() const;
  void _internal_set_pid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.SyncPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Proto::Transform* transform_;
    int64_t pid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SyncCube final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.SyncCube) */ {
 public:
  inline SyncCube() : SyncCube(nullptr) {}
  ~SyncCube() override;
  explicit PROTOBUF_CONSTEXPR SyncCube(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncCube(const SyncCube& from);
  SyncCube(SyncCube&& from) noexcept
    : SyncCube() {
    *this = ::std::move(from);
  }

  inline SyncCube& operator=(const SyncCube& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncCube& operator=(SyncCube&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncCube& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncCube* internal_default_instance() {
    return reinterpret_cast<const SyncCube*>(
               &_SyncCube_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SyncCube& a, SyncCube& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncCube* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncCube* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncCube* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncCube>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncCube& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncCube& from) {
    SyncCube::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncCube* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.SyncCube";
  }
  protected:
  explicit SyncCube(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformFieldNumber = 2,
    kCidFieldNumber = 1,
  };
  // .Proto.Transform Transform = 2;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::Proto::Transform& transform() const;
  PROTOBUF_NODISCARD ::Proto::Transform* release_transform();
  ::Proto::Transform* mutable_transform();
  void set_allocated_transform(::Proto::Transform* transform);
  private:
  const ::Proto::Transform& _internal_transform() const;
  ::Proto::Transform* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::Proto::Transform* transform);
  ::Proto::Transform* unsafe_arena_release_transform();

  // int64 cid = 1;
  void clear_cid();
  int64_t cid() const;
  void set_cid(int64_t value);
  private:
  int64_t _internal_cid() const;
  void _internal_set_cid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.SyncCube)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Proto::Transform* transform_;
    int64_t cid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Sync final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.Sync) */ {
 public:
  inline Sync() : Sync(nullptr) {}
  ~Sync() override;
  explicit PROTOBUF_CONSTEXPR Sync(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sync(const Sync& from);
  Sync(Sync&& from) noexcept
    : Sync() {
    *this = ::std::move(from);
  }

  inline Sync& operator=(const Sync& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sync& operator=(Sync&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sync& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sync* internal_default_instance() {
    return reinterpret_cast<const Sync*>(
               &_Sync_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Sync& a, Sync& b) {
    a.Swap(&b);
  }
  inline void Swap(Sync* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sync* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sync* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Sync>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sync& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Sync& from) {
    Sync::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sync* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.Sync";
  }
  protected:
  explicit Sync(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 2,
    kCubesFieldNumber = 3,
    kFrameFieldNumber = 1,
  };
  // repeated .Proto.SyncPlayer players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::Proto::SyncPlayer* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SyncPlayer >*
      mutable_players();
  private:
  const ::Proto::SyncPlayer& _internal_players(int index) const;
  ::Proto::SyncPlayer* _internal_add_players();
  public:
  const ::Proto::SyncPlayer& players(int index) const;
  ::Proto::SyncPlayer* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SyncPlayer >&
      players() const;

  // repeated .Proto.SyncCube cubes = 3;
  int cubes_size() const;
  private:
  int _internal_cubes_size() const;
  public:
  void clear_cubes();
  ::Proto::SyncCube* mutable_cubes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SyncCube >*
      mutable_cubes();
  private:
  const ::Proto::SyncCube& _internal_cubes(int index) const;
  ::Proto::SyncCube* _internal_add_cubes();
  public:
  const ::Proto::SyncCube& cubes(int index) const;
  ::Proto::SyncCube* add_cubes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SyncCube >&
      cubes() const;

  // int64 frame = 1;
  void clear_frame();
  int64_t frame() const;
  void set_frame(int64_t value);
  private:
  int64_t _internal_frame() const;
  void _internal_set_frame(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.Sync)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SyncPlayer > players_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SyncCube > cubes_;
    int64_t frame_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SyncPid

// int64 Pid = 1;
inline void SyncPid::clear_pid() {
  _impl_.pid_ = int64_t{0};
}
inline int64_t SyncPid::_internal_pid() const {
  return _impl_.pid_;
}
inline int64_t SyncPid::pid() const {
  // @@protoc_insertion_point(field_get:Proto.SyncPid.Pid)
  return _internal_pid();
}
inline void SyncPid::_internal_set_pid(int64_t value) {
  
  _impl_.pid_ = value;
}
inline void SyncPid::set_pid(int64_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:Proto.SyncPid.Pid)
}

// float Speed = 2;
inline void SyncPid::clear_speed() {
  _impl_.speed_ = 0;
}
inline float SyncPid::_internal_speed() const {
  return _impl_.speed_;
}
inline float SyncPid::speed() const {
  // @@protoc_insertion_point(field_get:Proto.SyncPid.Speed)
  return _internal_speed();
}
inline void SyncPid::_internal_set_speed(float value) {
  
  _impl_.speed_ = value;
}
inline void SyncPid::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:Proto.SyncPid.Speed)
}

// -------------------------------------------------------------------

// MoveSphere

// int64 Pid = 1;
inline void MoveSphere::clear_pid() {
  _impl_.pid_ = int64_t{0};
}
inline int64_t MoveSphere::_internal_pid() const {
  return _impl_.pid_;
}
inline int64_t MoveSphere::pid() const {
  // @@protoc_insertion_point(field_get:Proto.MoveSphere.Pid)
  return _internal_pid();
}
inline void MoveSphere::_internal_set_pid(int64_t value) {
  
  _impl_.pid_ = value;
}
inline void MoveSphere::set_pid(int64_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:Proto.MoveSphere.Pid)
}

// float Horizontal = 2;
inline void MoveSphere::clear_horizontal() {
  _impl_.horizontal_ = 0;
}
inline float MoveSphere::_internal_horizontal() const {
  return _impl_.horizontal_;
}
inline float MoveSphere::horizontal() const {
  // @@protoc_insertion_point(field_get:Proto.MoveSphere.Horizontal)
  return _internal_horizontal();
}
inline void MoveSphere::_internal_set_horizontal(float value) {
  
  _impl_.horizontal_ = value;
}
inline void MoveSphere::set_horizontal(float value) {
  _internal_set_horizontal(value);
  // @@protoc_insertion_point(field_set:Proto.MoveSphere.Horizontal)
}

// float Vertical = 3;
inline void MoveSphere::clear_vertical() {
  _impl_.vertical_ = 0;
}
inline float MoveSphere::_internal_vertical() const {
  return _impl_.vertical_;
}
inline float MoveSphere::vertical() const {
  // @@protoc_insertion_point(field_get:Proto.MoveSphere.Vertical)
  return _internal_vertical();
}
inline void MoveSphere::_internal_set_vertical(float value) {
  
  _impl_.vertical_ = value;
}
inline void MoveSphere::set_vertical(float value) {
  _internal_set_vertical(value);
  // @@protoc_insertion_point(field_set:Proto.MoveSphere.Vertical)
}

// -------------------------------------------------------------------

// Position

// float x = 1;
inline void Position::clear_x() {
  _impl_.x_ = 0;
}
inline float Position::_internal_x() const {
  return _impl_.x_;
}
inline float Position::x() const {
  // @@protoc_insertion_point(field_get:Proto.Position.x)
  return _internal_x();
}
inline void Position::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Position::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Proto.Position.x)
}

// float y = 2;
inline void Position::clear_y() {
  _impl_.y_ = 0;
}
inline float Position::_internal_y() const {
  return _impl_.y_;
}
inline float Position::y() const {
  // @@protoc_insertion_point(field_get:Proto.Position.y)
  return _internal_y();
}
inline void Position::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Position::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Proto.Position.y)
}

// float z = 3;
inline void Position::clear_z() {
  _impl_.z_ = 0;
}
inline float Position::_internal_z() const {
  return _impl_.z_;
}
inline float Position::z() const {
  // @@protoc_insertion_point(field_get:Proto.Position.z)
  return _internal_z();
}
inline void Position::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Position::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Proto.Position.z)
}

// -------------------------------------------------------------------

// Rotation

// float x = 1;
inline void Rotation::clear_x() {
  _impl_.x_ = 0;
}
inline float Rotation::_internal_x() const {
  return _impl_.x_;
}
inline float Rotation::x() const {
  // @@protoc_insertion_point(field_get:Proto.Rotation.x)
  return _internal_x();
}
inline void Rotation::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Rotation::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Proto.Rotation.x)
}

// float y = 2;
inline void Rotation::clear_y() {
  _impl_.y_ = 0;
}
inline float Rotation::_internal_y() const {
  return _impl_.y_;
}
inline float Rotation::y() const {
  // @@protoc_insertion_point(field_get:Proto.Rotation.y)
  return _internal_y();
}
inline void Rotation::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Rotation::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Proto.Rotation.y)
}

// float z = 3;
inline void Rotation::clear_z() {
  _impl_.z_ = 0;
}
inline float Rotation::_internal_z() const {
  return _impl_.z_;
}
inline float Rotation::z() const {
  // @@protoc_insertion_point(field_get:Proto.Rotation.z)
  return _internal_z();
}
inline void Rotation::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Rotation::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Proto.Rotation.z)
}

// float w = 4;
inline void Rotation::clear_w() {
  _impl_.w_ = 0;
}
inline float Rotation::_internal_w() const {
  return _impl_.w_;
}
inline float Rotation::w() const {
  // @@protoc_insertion_point(field_get:Proto.Rotation.w)
  return _internal_w();
}
inline void Rotation::_internal_set_w(float value) {
  
  _impl_.w_ = value;
}
inline void Rotation::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:Proto.Rotation.w)
}

// -------------------------------------------------------------------

// Transform

// .Proto.Position Position = 1;
inline bool Transform::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool Transform::has_position() const {
  return _internal_has_position();
}
inline void Transform::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::Proto::Position& Transform::_internal_position() const {
  const ::Proto::Position* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::Position&>(
      ::Proto::_Position_default_instance_);
}
inline const ::Proto::Position& Transform::position() const {
  // @@protoc_insertion_point(field_get:Proto.Transform.Position)
  return _internal_position();
}
inline void Transform::unsafe_arena_set_allocated_position(
    ::Proto::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Transform.Position)
}
inline ::Proto::Position* Transform::release_position() {
  
  ::Proto::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Proto::Position* Transform::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Proto.Transform.Position)
  
  ::Proto::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Proto::Position* Transform::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Position>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Proto::Position* Transform::mutable_position() {
  ::Proto::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Proto.Transform.Position)
  return _msg;
}
inline void Transform::set_allocated_position(::Proto::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Proto.Transform.Position)
}

// .Proto.Rotation rotation = 2;
inline bool Transform::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool Transform::has_rotation() const {
  return _internal_has_rotation();
}
inline void Transform::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::Proto::Rotation& Transform::_internal_rotation() const {
  const ::Proto::Rotation* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::Rotation&>(
      ::Proto::_Rotation_default_instance_);
}
inline const ::Proto::Rotation& Transform::rotation() const {
  // @@protoc_insertion_point(field_get:Proto.Transform.rotation)
  return _internal_rotation();
}
inline void Transform::unsafe_arena_set_allocated_rotation(
    ::Proto::Rotation* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.Transform.rotation)
}
inline ::Proto::Rotation* Transform::release_rotation() {
  
  ::Proto::Rotation* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Proto::Rotation* Transform::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Proto.Transform.rotation)
  
  ::Proto::Rotation* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Proto::Rotation* Transform::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Rotation>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Proto::Rotation* Transform::mutable_rotation() {
  ::Proto::Rotation* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Proto.Transform.rotation)
  return _msg;
}
inline void Transform::set_allocated_rotation(::Proto::Rotation* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Proto.Transform.rotation)
}

// -------------------------------------------------------------------

// SyncPlayer

// int64 pid = 1;
inline void SyncPlayer::clear_pid() {
  _impl_.pid_ = int64_t{0};
}
inline int64_t SyncPlayer::_internal_pid() const {
  return _impl_.pid_;
}
inline int64_t SyncPlayer::pid() const {
  // @@protoc_insertion_point(field_get:Proto.SyncPlayer.pid)
  return _internal_pid();
}
inline void SyncPlayer::_internal_set_pid(int64_t value) {
  
  _impl_.pid_ = value;
}
inline void SyncPlayer::set_pid(int64_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:Proto.SyncPlayer.pid)
}

// .Proto.Transform transform = 2;
inline bool SyncPlayer::_internal_has_transform() const {
  return this != internal_default_instance() && _impl_.transform_ != nullptr;
}
inline bool SyncPlayer::has_transform() const {
  return _internal_has_transform();
}
inline void SyncPlayer::clear_transform() {
  if (GetArenaForAllocation() == nullptr && _impl_.transform_ != nullptr) {
    delete _impl_.transform_;
  }
  _impl_.transform_ = nullptr;
}
inline const ::Proto::Transform& SyncPlayer::_internal_transform() const {
  const ::Proto::Transform* p = _impl_.transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::Transform&>(
      ::Proto::_Transform_default_instance_);
}
inline const ::Proto::Transform& SyncPlayer::transform() const {
  // @@protoc_insertion_point(field_get:Proto.SyncPlayer.transform)
  return _internal_transform();
}
inline void SyncPlayer::unsafe_arena_set_allocated_transform(
    ::Proto::Transform* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transform_);
  }
  _impl_.transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SyncPlayer.transform)
}
inline ::Proto::Transform* SyncPlayer::release_transform() {
  
  ::Proto::Transform* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Proto::Transform* SyncPlayer::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:Proto.SyncPlayer.transform)
  
  ::Proto::Transform* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
  return temp;
}
inline ::Proto::Transform* SyncPlayer::_internal_mutable_transform() {
  
  if (_impl_.transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Transform>(GetArenaForAllocation());
    _impl_.transform_ = p;
  }
  return _impl_.transform_;
}
inline ::Proto::Transform* SyncPlayer::mutable_transform() {
  ::Proto::Transform* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:Proto.SyncPlayer.transform)
  return _msg;
}
inline void SyncPlayer::set_allocated_transform(::Proto::Transform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.transform_;
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transform);
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:Proto.SyncPlayer.transform)
}

// -------------------------------------------------------------------

// SyncCube

// int64 cid = 1;
inline void SyncCube::clear_cid() {
  _impl_.cid_ = int64_t{0};
}
inline int64_t SyncCube::_internal_cid() const {
  return _impl_.cid_;
}
inline int64_t SyncCube::cid() const {
  // @@protoc_insertion_point(field_get:Proto.SyncCube.cid)
  return _internal_cid();
}
inline void SyncCube::_internal_set_cid(int64_t value) {
  
  _impl_.cid_ = value;
}
inline void SyncCube::set_cid(int64_t value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:Proto.SyncCube.cid)
}

// .Proto.Transform Transform = 2;
inline bool SyncCube::_internal_has_transform() const {
  return this != internal_default_instance() && _impl_.transform_ != nullptr;
}
inline bool SyncCube::has_transform() const {
  return _internal_has_transform();
}
inline void SyncCube::clear_transform() {
  if (GetArenaForAllocation() == nullptr && _impl_.transform_ != nullptr) {
    delete _impl_.transform_;
  }
  _impl_.transform_ = nullptr;
}
inline const ::Proto::Transform& SyncCube::_internal_transform() const {
  const ::Proto::Transform* p = _impl_.transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::Proto::Transform&>(
      ::Proto::_Transform_default_instance_);
}
inline const ::Proto::Transform& SyncCube::transform() const {
  // @@protoc_insertion_point(field_get:Proto.SyncCube.Transform)
  return _internal_transform();
}
inline void SyncCube::unsafe_arena_set_allocated_transform(
    ::Proto::Transform* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transform_);
  }
  _impl_.transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proto.SyncCube.Transform)
}
inline ::Proto::Transform* SyncCube::release_transform() {
  
  ::Proto::Transform* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Proto::Transform* SyncCube::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:Proto.SyncCube.Transform)
  
  ::Proto::Transform* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
  return temp;
}
inline ::Proto::Transform* SyncCube::_internal_mutable_transform() {
  
  if (_impl_.transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::Transform>(GetArenaForAllocation());
    _impl_.transform_ = p;
  }
  return _impl_.transform_;
}
inline ::Proto::Transform* SyncCube::mutable_transform() {
  ::Proto::Transform* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:Proto.SyncCube.Transform)
  return _msg;
}
inline void SyncCube::set_allocated_transform(::Proto::Transform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.transform_;
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transform);
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:Proto.SyncCube.Transform)
}

// -------------------------------------------------------------------

// Sync

// int64 frame = 1;
inline void Sync::clear_frame() {
  _impl_.frame_ = int64_t{0};
}
inline int64_t Sync::_internal_frame() const {
  return _impl_.frame_;
}
inline int64_t Sync::frame() const {
  // @@protoc_insertion_point(field_get:Proto.Sync.frame)
  return _internal_frame();
}
inline void Sync::_internal_set_frame(int64_t value) {
  
  _impl_.frame_ = value;
}
inline void Sync::set_frame(int64_t value) {
  _internal_set_frame(value);
  // @@protoc_insertion_point(field_set:Proto.Sync.frame)
}

// repeated .Proto.SyncPlayer players = 2;
inline int Sync::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int Sync::players_size() const {
  return _internal_players_size();
}
inline void Sync::clear_players() {
  _impl_.players_.Clear();
}
inline ::Proto::SyncPlayer* Sync::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.Sync.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SyncPlayer >*
Sync::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:Proto.Sync.players)
  return &_impl_.players_;
}
inline const ::Proto::SyncPlayer& Sync::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::Proto::SyncPlayer& Sync::players(int index) const {
  // @@protoc_insertion_point(field_get:Proto.Sync.players)
  return _internal_players(index);
}
inline ::Proto::SyncPlayer* Sync::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::Proto::SyncPlayer* Sync::add_players() {
  ::Proto::SyncPlayer* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:Proto.Sync.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SyncPlayer >&
Sync::players() const {
  // @@protoc_insertion_point(field_list:Proto.Sync.players)
  return _impl_.players_;
}

// repeated .Proto.SyncCube cubes = 3;
inline int Sync::_internal_cubes_size() const {
  return _impl_.cubes_.size();
}
inline int Sync::cubes_size() const {
  return _internal_cubes_size();
}
inline void Sync::clear_cubes() {
  _impl_.cubes_.Clear();
}
inline ::Proto::SyncCube* Sync::mutable_cubes(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.Sync.cubes)
  return _impl_.cubes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SyncCube >*
Sync::mutable_cubes() {
  // @@protoc_insertion_point(field_mutable_list:Proto.Sync.cubes)
  return &_impl_.cubes_;
}
inline const ::Proto::SyncCube& Sync::_internal_cubes(int index) const {
  return _impl_.cubes_.Get(index);
}
inline const ::Proto::SyncCube& Sync::cubes(int index) const {
  // @@protoc_insertion_point(field_get:Proto.Sync.cubes)
  return _internal_cubes(index);
}
inline ::Proto::SyncCube* Sync::_internal_add_cubes() {
  return _impl_.cubes_.Add();
}
inline ::Proto::SyncCube* Sync::add_cubes() {
  ::Proto::SyncCube* _add = _internal_add_cubes();
  // @@protoc_insertion_point(field_add:Proto.Sync.cubes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::SyncCube >&
Sync::cubes() const {
  // @@protoc_insertion_point(field_list:Proto.Sync.cubes)
  return _impl_.cubes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
